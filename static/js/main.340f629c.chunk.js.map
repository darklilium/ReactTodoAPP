{"version":3,"sources":["TodoContext/index.js","TodoContext/useLocalStorage.js","TodoCounter/index.js","TodoSearch/index.js","TodoList/index.js","TodoItem/index.js","CreateTodoButton/index.js","Modal/index.js","App/AppUI.js","App/index.js","index.js"],"names":["TodoContext","React","createContext","TodoProvider","props","itemName","initialValue","useState","error","setError","loading","setLoading","item","setItem","useEffect","setTimeout","localStorageItem","localStorage","getItem","parsedItem","JSON","parse","stringify","saveItem","newItem","stringifiedTodos","useLocalStorage","todos","saveTodos","changeList","searchValue","setSearchValue","openModal","setOpenModal","modalText","setModalText","completedTodos","filter","todo","completed","length","totalTodos","findRelatedTodos","todoText","text","toLowerCase","searchText","includes","Provider","value","completeTodo","index","console","log","deleteTodo","todoID","todoIndex","findIndex","id","splice","createTodo","newTodos","push","children","TodoCounter","useContext","className","TodoSearch","Fragment","onChange","event","target","placeholder","TodoList","TodoItem","type","onClick","onComplete","onDelete","CreateTodoButton","document","getElementById","Modal","ReactDOM","createPortal","prevState","AppUI","map","App","render"],"mappings":"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","file":"static/js/main.340f629c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useLocalStorage } from \"./useLocalStorage\";\r\n\r\nconst TodoContext = React.createContext();\r\n\r\nfunction TodoProvider (props) {\r\n    //variable : how you name them right now.\r\n    //useLocalStorage is a custom hook that returns an object with the item,\r\n    const {\r\n        item: todos, \r\n        saveItem: saveTodos, \r\n        loading,\r\n        error,\r\n        setItem: changeList,\r\n      } = useLocalStorage('TODOS_V1', []);\r\n    \r\n      //For seach a todo and fx for changing value\r\n      const [searchValue, setSearchValue] = React.useState(''); //state and setter state for searchValue, default ''\r\n       //for modal\r\n      const [openModal, setOpenModal] = React.useState(false);\r\n      const [modalText, setModalText] = React.useState('');\r\n\r\n      //get the todo counter: completed vs total \r\n      const completedTodos = todos.filter(todo=> !!todo.completed).length; //get the todos that are completed (how many)\r\n      const totalTodos = todos.length; //get the total of todos\r\n    \r\n      //get the todos\r\n      let findRelatedTodos = [];\r\n      \r\n      if(!searchValue.length>=1){ //if there are not searchvalue, replace the todos with the todos from LS (Show them all)\r\n        findRelatedTodos = todos;\r\n      }else{\r\n        findRelatedTodos = todos.filter(todo=> { //filter the todos according to the user input\r\n          const todoText = todo.text.toLowerCase(); //make it both lowercase to easily compare them\r\n          const searchText = searchValue.toLowerCase(); //this one too\r\n          return todoText.includes(searchText) //and then look if one includes the other one.\r\n        });\r\n      }\r\n    \r\n     \r\n      //function that creates a todo\r\n      const createTodo = (text) =>{\r\n        const newTodos = [...todos];\r\n        newTodos.push({\r\n          text,\r\n          completed: false,\r\n          id: todos.length+1,\r\n        });\r\n\r\n        setModalText('TODO has been added to the list !');\r\n        saveTodos(newTodos);\r\n        changeList(newTodos);\r\n      }\r\n\r\n      //function that make a complete todo and change the symbol to check or not checked\r\n      const completeTodo = (index) => {\r\n        console.log(index);\r\n        //const todoIndex = todos.findIndex(todo=> todo.id === id); //finding the index selected based on text\r\n        const newItem = [...todos]; //get a new array of todos state replacement\r\n        newItem[index].completed = true; //change the completion to true\r\n       \r\n        //save in localstorage and then modify the state in there as well \r\n        saveTodos(newItem);\r\n        changeList(newItem);\r\n        \r\n      }\r\n    \r\n      //funciton that deletes a todo based on text/item selected\r\n      const deleteTodo = (todoID) => { \r\n       \r\n        const todoIndex = todos.findIndex(todo=> todo.id === todoID); //finding the index selected based on todoID\r\n        const newItem = [...todos]; //get a new array of todos for state replacement\r\n        newItem.splice(todoIndex , 1); //remove the item based on index in array\r\n        //save in localstorage and then modify them\r\n        changeList(newItem);\r\n        saveTodos(newItem);\r\n      \r\n\r\n      }\r\n\r\n    \r\n\r\n    return (\r\n        <TodoContext.Provider value={{\r\n            loading ,\r\n            error ,\r\n            completedTodos,\r\n            totalTodos,\r\n            searchValue,\r\n            setSearchValue,\r\n            findRelatedTodos ,\r\n            completeTodo,\r\n            deleteTodo ,\r\n            openModal,\r\n            setOpenModal,\r\n            createTodo,\r\n            modalText,\r\n            setModalText,\r\n            \r\n        }}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    )\r\n}\r\n\r\nexport { TodoContext, TodoProvider }\r\n","import React from \"react\";\r\n\r\n//custom react hook!\r\nfunction useLocalStorage (itemName, initialValue) { //'TODOS_V1'\r\n    const [error, setError] = React.useState(false); //changes if error on loading\r\n  \r\n    const [loading, setLoading] = React.useState(true); //save the loading status and creates a setter to change the loading status\r\n   \r\n    //For changing the state for the todoList previously obtained\r\n    const [item, setItem] = React.useState(initialValue);  //saves the item and creates a setter fx\r\n  \r\n    React.useEffect(()=>{\r\n      setTimeout(()=>{ //simulating a promise\r\n        try {\r\n           //get TODOS from localstorage (LS)\r\n           const localStorageItem = localStorage.getItem(itemName);\r\n  \r\n           let parsedItem = initialValue;\r\n           //if there isnt saved todo in LS\r\n           if(!localStorageItem){\r\n             localStorage.setItem(itemName, JSON.stringify(initialValue));\r\n           //if there are some :)  \r\n           }else{\r\n             parsedItem = JSON.parse(localStorageItem); //parse the LS item if there is one\r\n           }\r\n           \r\n           setItem(parsedItem); //changes the item status to the saved one\r\n   \r\n           //it is loaded alr.\r\n           setLoading(false); //when finishes loading\r\n        } catch (error) {\r\n          setError(error) //if error when loading\r\n        }\r\n      },2000)\r\n    });\r\n    \r\n   \r\n    //To modify the state and save it on localstorage\r\n    const saveItem = (newItem) => {\r\n      try {\r\n        const stringifiedTodos = JSON.stringify(newItem); //stringfy it\r\n        localStorage.setItem(itemName, stringifiedTodos); //save it on LS\r\n       // setItem(newItem); //change the state of new item in case.\r\n      } catch (error) {\r\n        setError(error) //if errors on loading.\r\n      }\r\n     \r\n    }\r\n    //Returning the item and the fx for saving on localstorage and use it on APP. This will be used in a Provider (TodoProvider).\r\n    return {\r\n      item, //returning the todo object obtained from localstorage\r\n      saveItem, //returning this fx in case if its needed\r\n      loading, //returning the state of loading var\r\n      error, //returning the state of error var\r\n      setItem, //for changing the state of todo list but not modify the LS\r\n    };\r\n  \r\n  }\r\n\r\n  export {useLocalStorage};","import React from \"react\";\r\nimport { TodoContext } from \"../TodoContext\";\r\nimport './TodoCounter.css';\r\n\r\n\r\n\r\nfunction TodoCounter() {\r\n    const {totalTodos, completedTodos} = React.useContext(TodoContext);\r\n    return (\r\n        <div className='TodoCounter-title-wrapper'>\r\n            <p className='TodoCounter-title'>What's up today?</p>\r\n            <p className='TodoCounter-todos-count'>TO-DOS Completed: {completedTodos}/{totalTodos} </p>\r\n \r\n        </div>\r\n          )\r\n}\r\n\r\nexport {TodoCounter};","import React from \"react\";\r\nimport { TodoContext } from \"../TodoContext\";\r\nimport './TodoSearch.css';\r\n\r\nfunction TodoSearch() {\r\n\r\n    const { searchValue, setSearchValue} = React.useContext(TodoContext);\r\n\r\n    const onSearchValueChange = (event) => {\r\n        setSearchValue(event.target.value)\r\n        \r\n    }\r\n\r\n \r\n    return (\r\n        <React.Fragment>\r\n         \r\n        \r\n            <input onChange={onSearchValueChange} value={searchValue}\r\n             className='inputSearchTodo' \r\n             id='search' placeholder='SEARCH/CREATE TODOS HERE'></input>\r\n           \r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport {TodoSearch};","import React from \"react\";\r\nimport './TodoList.css';\r\n\r\nfunction TodoList(props) {\r\n    return (\r\n       <section className='TodoList'>\r\n        {props.children}\r\n       </section>\r\n    )\r\n}\r\n\r\nexport {TodoList};","import React from \"react\";\r\nimport './TodoItem.css';\r\n\r\nfunction TodoItem(props) {\r\n\r\n    return (\r\n        <div className='TodoItem'>\r\n         \r\n            <label className=\"TodoItem-custom-checkbox\">\r\n                <input type=\"checkbox\" id='checkboxStatus' className={`TodoItem-checkbox ${props.completed && 'TodoItem-checkbox-active'}`}/>\r\n                <span onClick={props.onComplete} className={`TodoItemSpanBox ${props.completed && 'TodoItemSpan'}`}></span>\r\n            </label>\r\n           <p>{props.text}</p>            \r\n            <button  className='TodoItem-button-deleteItem' onClick={props.onDelete}>X</button>\r\n        </div>\r\n            \r\n           \r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport {TodoItem}","import React from \"react\";\r\nimport './CreateTodoButton.css';\r\n\r\nfunction CreateTodoButton (props) {\r\n\r\n    \r\n    const onClickButton = () => {\r\n\r\n       if(document.getElementById('search').value){\r\n           console.log(\"tx\", document.getElementById('search').value);\r\n           props.createTodo(document.getElementById('search').value)\r\n           \r\n       } else{\r\n           props.setModalText('Sorry, we couldnt add your TODO right now :(');\r\n           console.log(\"tx2\", document.getElementById('search').value);\r\n         \r\n       }\r\n       props.setOpenModal(true)\r\n      \r\n    }\r\n\r\n    return (\r\n        <button className='btnCreateTodo'\r\n        onClick={onClickButton}>NEW</button>\r\n    );\r\n}\r\n\r\nexport { CreateTodoButton };","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './Modal.css';\r\n\r\n\r\nfunction Modal(props,{children} ){\r\n\r\n    const onClose = () =>{\r\n        \r\n        props.setOpenModal(prevState => !prevState)\r\n\r\n    }\r\n\r\n    return ReactDOM.createPortal(\r\n        <div className='Modal-bg'>\r\n            <div className='Modal-Container'>\r\n             {children}\r\n             <p>{props.modalText}</p>\r\n             <span className='Modal-btnClose' onClick={onClose}>x</span>\r\n            </div>\r\n            \r\n        </div>, document.getElementById('myModal')\r\n    );\r\n}\r\n\r\n\r\nexport {Modal}","import React from \"react\";\r\nimport { TodoCounter }from \"../TodoCounter\";\r\nimport { TodoSearch } from \"../TodoSearch\";\r\nimport { TodoList } from \"../TodoList\";\r\nimport { TodoItem } from \"../TodoItem\";\r\nimport { CreateTodoButton } from \"../CreateTodoButton\";\r\nimport { TodoContext } from \"../TodoContext\";\r\nimport { Modal } from '../Modal';\r\n\r\nfunction AppUI (){\r\n\r\n    const {error, loading, findRelatedTodos, completeTodo, deleteTodo, \r\n            openModal, setOpenModal, createTodo, modalText, setModalText} = React.useContext(TodoContext);\r\n\r\n\r\n    return(\r\n    <React.Fragment>\r\n\r\n        <TodoCounter/>  \r\n    \r\n       <div className=\"todo-inner-wrapper\">\r\n\r\n        <TodoSearch/> \r\n\r\n            <TodoList>\r\n            \r\n                {error && <p>Panic, there is an error coming!</p>}\r\n                {loading && <p>Loading, dont panic!</p>}\r\n                {(!loading && !findRelatedTodos.length) && <p>Make ur first todo</p>}\r\n    \r\n                {findRelatedTodos.map((todo,index) => (\r\n                <TodoItem \r\n                    key={index} \r\n                    text={todo.text} \r\n                    completed={todo.completed}\r\n                    onComplete = {()=>completeTodo(index)}\r\n                    onDelete = {()=>deleteTodo(todo.id)}\r\n                />))}\r\n            </TodoList>\r\n       \r\n        </div>\r\n        <CreateTodoButton setOpenModal={setOpenModal} createTodo={createTodo} setModalText={setModalText} /> \r\n      \r\n        \r\n        {!!openModal && (\r\n            <Modal setOpenModal={setOpenModal} modalText={modalText} />             \r\n        )}\r\n        \r\n\r\n        \r\n    </React.Fragment>  \r\n    );\r\n}\r\n\r\nexport {AppUI};","import React from \"react\";\nimport { AppUI  } from \"./AppUI\";\nimport {TodoProvider} from '../TodoContext';\n\nfunction App() {\n\n  return (\n    <TodoProvider>\n      <AppUI />\n    </TodoProvider>\n    \n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/index';\n\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('myApp')\n);\n\n\n"],"sourceRoot":""}