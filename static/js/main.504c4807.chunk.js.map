{"version":3,"sources":["App/useTodos.js","App/useLocalStorage.js","TodoCounter/index.js","TodoSearch/index.js","TodoList/index.js","TodoItem/index.js","CreateTodoButton/index.js","Modal/index.js","TodoHeader/index.js","App/index.js","index.js"],"names":["useTodos","itemName","initialValue","React","useState","error","setError","loading","setLoading","item","setItem","useEffect","setTimeout","localStorageItem","localStorage","getItem","parsedItem","JSON","parse","stringify","saveItem","newItem","stringifiedTodos","useLocalStorage","todos","saveTodos","changeList","searchValue","setSearchValue","openModal","setOpenModal","modalText","setModalText","completedTodos","filter","todo","completed","length","totalTodos","findRelatedTodos","todoText","text","toLowerCase","searchText","includes","completeTodo","index","console","log","deleteTodo","todoID","todoIndex","findIndex","id","splice","createTodo","newTodos","push","TodoCounter","className","TodoSearch","Fragment","onChange","event","target","value","placeholder","TodoList","props","children","TodoItem","type","onClick","onComplete","onDelete","CreateTodoButton","document","getElementById","Modal","ReactDOM","createPortal","prevState","TodoHeader","App","map","render"],"mappings":"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","file":"static/js/main.504c4807.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useLocalStorage } from \"./useLocalStorage\";\r\n\r\n\r\n//Custom hook instead of provider\r\nfunction useTodos() {\r\n    //variable : how you name them right now.\r\n    //useLocalStorage is a custom hook that returns an object with the item,\r\n    const {\r\n        item: todos, \r\n        saveItem: saveTodos, \r\n        loading,\r\n        error,\r\n        setItem: changeList,\r\n      } = useLocalStorage('TODOS_V1', []);\r\n    \r\n      //For seach a todo and fx for changing value\r\n      const [searchValue, setSearchValue] = React.useState(''); //state and setter state for searchValue, default ''\r\n       //for modal\r\n      const [openModal, setOpenModal] = React.useState(false);\r\n      const [modalText, setModalText] = React.useState('');\r\n\r\n      //get the todo counter: completed vs total \r\n      const completedTodos = todos.filter(todo=> !!todo.completed).length; //get the todos that are completed (how many)\r\n      const totalTodos = todos.length; //get the total of todos\r\n    \r\n      //get the todos\r\n      let findRelatedTodos = [];\r\n      \r\n      if(!searchValue.length>=1){ //if there are not searchvalue, replace the todos with the todos from LS (Show them all)\r\n        findRelatedTodos = todos;\r\n      }else{\r\n        findRelatedTodos = todos.filter(todo=> { //filter the todos according to the user input\r\n          const todoText = todo.text.toLowerCase(); //make it both lowercase to easily compare them\r\n          const searchText = searchValue.toLowerCase(); //this one too\r\n          return todoText.includes(searchText) //and then look if one includes the other one.\r\n        });\r\n      }\r\n    \r\n     \r\n      //function that creates a todo\r\n      const createTodo = (text) =>{\r\n        const newTodos = [...todos];\r\n        newTodos.push({\r\n          text,\r\n          completed: false,\r\n          id: todos.length+1,\r\n        });\r\n\r\n        setModalText('TODO has been added to the list !');\r\n        saveTodos(newTodos);\r\n        changeList(newTodos);\r\n      }\r\n\r\n      //function that make a complete todo and change the symbol to check or not checked\r\n      const completeTodo = (index) => {\r\n        console.log(index);\r\n        //const todoIndex = todos.findIndex(todo=> todo.id === id); //finding the index selected based on text\r\n        const newItem = [...todos]; //get a new array of todos state replacement\r\n        if(!newItem[index].completed){\r\n          newItem[index].completed = true; //change the completion to true\r\n        }else{\r\n          newItem[index].completed = false;\r\n        }\r\n       \r\n       \r\n        //save in localstorage and then modify the state in there as well \r\n        saveTodos(newItem);\r\n        changeList(newItem);\r\n        \r\n      }\r\n    \r\n      //funciton that deletes a todo based on text/item selected\r\n      const deleteTodo = (todoID) => { \r\n       \r\n        const todoIndex = todos.findIndex(todo=> todo.id === todoID); //finding the index selected based on todoID\r\n        const newItem = [...todos]; //get a new array of todos for state replacement\r\n        newItem.splice(todoIndex , 1); //remove the item based on index in array\r\n        //save in localstorage and then modify them\r\n        changeList(newItem);\r\n        saveTodos(newItem);\r\n      \r\n\r\n      }\r\n\r\n    \r\n\r\n    return (\r\n        {\r\n            loading ,\r\n            error ,\r\n            completedTodos,\r\n            totalTodos,\r\n            searchValue,\r\n            setSearchValue,\r\n            findRelatedTodos ,\r\n            completeTodo,\r\n            deleteTodo ,\r\n            openModal,\r\n            setOpenModal,\r\n            createTodo,\r\n            modalText,\r\n            setModalText,\r\n            \r\n        }\r\n    )\r\n}\r\n\r\nexport { useTodos }\r\n","import React from \"react\";\r\n\r\n//custom react hook!\r\nfunction useLocalStorage (itemName, initialValue) { //'TODOS_V1'\r\n    const [error, setError] = React.useState(false); //changes if error on loading\r\n  \r\n    const [loading, setLoading] = React.useState(true); //save the loading status and creates a setter to change the loading status\r\n   \r\n    //For changing the state for the todoList previously obtained\r\n    const [item, setItem] = React.useState(initialValue);  //saves the item and creates a setter fx\r\n  \r\n    React.useEffect(()=>{\r\n      setTimeout(()=>{ //simulating a promise\r\n        try {\r\n           //get TODOS from localstorage (LS)\r\n           const localStorageItem = localStorage.getItem(itemName);\r\n  \r\n           let parsedItem = initialValue;\r\n           //if there isnt saved todo in LS\r\n           if(!localStorageItem){\r\n             localStorage.setItem(itemName, JSON.stringify(initialValue));\r\n           //if there are some :)  \r\n           }else{\r\n             parsedItem = JSON.parse(localStorageItem); //parse the LS item if there is one\r\n           }\r\n           \r\n           setItem(parsedItem); //changes the item status to the saved one\r\n   \r\n           //it is loaded alr.\r\n           setLoading(false); //when finishes loading\r\n        } catch (error) {\r\n          setError(error) //if error when loading\r\n        }\r\n      },2000)\r\n    });\r\n    \r\n   \r\n    //To modify the state and save it on localstorage\r\n    const saveItem = (newItem) => {\r\n      try {\r\n        const stringifiedTodos = JSON.stringify(newItem); //stringfy it\r\n        localStorage.setItem(itemName, stringifiedTodos); //save it on LS\r\n       // setItem(newItem); //change the state of new item in case.\r\n      } catch (error) {\r\n        setError(error) //if errors on loading.\r\n      }\r\n     \r\n    }\r\n    //Returning the item and the fx for saving on localstorage and use it on APP. This will be used in a Provider (TodoProvider).\r\n    return {\r\n      item, //returning the todo object obtained from localstorage\r\n      saveItem, //returning this fx in case if its needed\r\n      loading, //returning the state of loading var\r\n      error, //returning the state of error var\r\n      setItem, //for changing the state of todo list but not modify the LS\r\n    };\r\n  \r\n  }\r\n\r\n  export {useLocalStorage};","import React from \"react\";\r\nimport './TodoCounter.css';\r\n\r\n\r\n\r\nfunction TodoCounter({totalTodos, completedTodos}) {\r\n   \r\n    return (\r\n        <div className='TodoCounter-title-wrapper'>\r\n            <p className='TodoCounter-title'>What's up today?</p>\r\n            <p className='TodoCounter-todos-count'>TO-DOS Completed: {completedTodos}/{totalTodos} </p>\r\n \r\n        </div>\r\n          )\r\n}\r\n\r\nexport {TodoCounter};","import React from \"react\";\r\nimport './TodoSearch.css';\r\n\r\nfunction TodoSearch({searchValue, setSearchValue}) {\r\n\r\n  \r\n\r\n    const onSearchValueChange = (event) => {\r\n        setSearchValue(event.target.value)\r\n        \r\n    }\r\n\r\n \r\n    return (\r\n        <React.Fragment>\r\n         \r\n        \r\n            <input onChange={onSearchValueChange} value={searchValue}\r\n             className='inputSearchTodo' \r\n             id='search' placeholder='SEARCH/CREATE TODOS HERE'></input>\r\n           \r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport {TodoSearch};","import React from \"react\";\r\nimport './TodoList.css';\r\n\r\nfunction TodoList(props) {\r\n    return (\r\n       <section className='TodoList'>\r\n        {props.children}\r\n       </section>\r\n    )\r\n}\r\n\r\nexport {TodoList};","import React from \"react\";\r\nimport './TodoItem.css';\r\n\r\nfunction TodoItem(props) {\r\n\r\n    return (\r\n        <div className='TodoItem'>\r\n         \r\n            <label className=\"TodoItem-custom-checkbox\">\r\n                <input type=\"checkbox\" id='checkboxStatus' className={`TodoItem-checkbox ${props.completed && 'TodoItem-checkbox-active'}`}/>\r\n                <span onClick={props.onComplete} className={`TodoItemSpanBox ${props.completed && 'TodoItemSpan'}`}></span>\r\n            </label>\r\n           <p>{props.text}</p>            \r\n            <button  className='TodoItem-button-deleteItem' onClick={props.onDelete}>X</button>\r\n        </div>\r\n            \r\n           \r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport {TodoItem}","import React from \"react\";\r\nimport './CreateTodoButton.css';\r\n\r\nfunction CreateTodoButton (props) {\r\n\r\n    \r\n    const onClickButton = () => {\r\n\r\n       if(document.getElementById('search').value){\r\n           console.log(\"tx\", document.getElementById('search').value);\r\n           props.createTodo(document.getElementById('search').value)\r\n           \r\n       } else{\r\n           props.setModalText('Sorry, we couldnt add your TODO right now :(');\r\n           console.log(\"tx2\", document.getElementById('search').value);\r\n         \r\n       }\r\n       props.setOpenModal(true)\r\n      \r\n    }\r\n\r\n    return (\r\n        <button className='btnCreateTodo'\r\n        onClick={onClickButton}>NEW</button>\r\n    );\r\n}\r\n\r\nexport { CreateTodoButton };","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './Modal.css';\r\n\r\n\r\nfunction Modal(props,{children} ){\r\n\r\n    const onClose = () =>{\r\n        \r\n        props.setOpenModal(prevState => !prevState)\r\n\r\n    }\r\n\r\n    return ReactDOM.createPortal(\r\n        <div className='Modal-bg'>\r\n            <div className='Modal-Container'>\r\n             {children}\r\n             <p>{props.modalText}</p>\r\n             <span className='Modal-btnClose' onClick={onClose}>x</span>\r\n            </div>\r\n            \r\n        </div>, document.getElementById('myModal')\r\n    );\r\n}\r\n\r\n\r\nexport {Modal}","import React from \"react\";\r\n\r\nfunction TodoHeader({ children }){\r\n    return (\r\n        <header>\r\n            {children}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport {TodoHeader}","import React from \"react\";\r\nimport { useTodos } from './useTodos';\r\nimport { TodoCounter }from \"../TodoCounter\";\r\nimport { TodoSearch } from \"../TodoSearch\";\r\nimport { TodoList } from \"../TodoList\";\r\nimport { TodoItem } from \"../TodoItem\";\r\nimport { CreateTodoButton } from \"../CreateTodoButton\";\r\nimport { Modal } from '../Modal';\r\nimport {TodoHeader} from '../TodoHeader';\r\n\r\nfunction App() {\r\n  const {\r\n    error, \r\n    loading, \r\n    findRelatedTodos, \r\n    completeTodo, \r\n    deleteTodo, \r\n    openModal, \r\n    setOpenModal, \r\n    createTodo, \r\n    modalText, \r\n    setModalText,\r\n    totalTodos, completedTodos,\r\n    searchValue, setSearchValue} = useTodos();\r\n\r\n\r\n    return(\r\n      <React.Fragment>\r\n         <TodoHeader totalTodos = {totalTodos} completedTodos = {completedTodos}\r\n          searchValue = {searchValue} setSearchValue = {setSearchValue}/> \r\n  \r\n          <div className=\"todo-header-wrapper\">\r\n              <TodoHeader>\r\n                  <TodoCounter\r\n                      totalTodos = {totalTodos}\r\n                      completedTodos = {completedTodos}\r\n                  />  \r\n                  <TodoSearch \r\n                      searchValue = {searchValue}\r\n                      setSearchValue = {setSearchValue}\r\n                  />     \r\n              </TodoHeader>\r\n          </div>\r\n  \r\n         <div className=\"todolist-inner-wrapper\">\r\n    \r\n              <TodoList>\r\n              \r\n                  {error && <p>Panic, there is an error coming!</p>}\r\n                  {loading && <p>Loading, dont panic!</p>}\r\n                  {(!loading && !findRelatedTodos.length) && <p>Make ur first todo</p>}\r\n      \r\n                  {findRelatedTodos.map((todo,index) => (\r\n                  <TodoItem \r\n                      key={index} \r\n                      text={todo.text} \r\n                      completed={todo.completed}\r\n                      onComplete = {()=>completeTodo(index)}\r\n                      onDelete = {()=>deleteTodo(todo.id)}\r\n                  />))}\r\n              </TodoList>\r\n         \r\n          </div>\r\n          <CreateTodoButton setOpenModal={setOpenModal} createTodo={createTodo} setModalText={setModalText} /> \r\n        \r\n          \r\n          {!!openModal && (\r\n              <Modal setOpenModal={setOpenModal} modalText={modalText} />             \r\n          )}\r\n          \r\n  \r\n          \r\n      </React.Fragment>  \r\n      );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/index';\n\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('myApp')\n);\n\n\n"],"sourceRoot":""}