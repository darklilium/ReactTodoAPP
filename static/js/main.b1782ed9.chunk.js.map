{"version":3,"sources":["App/useTodos.js","App/useLocalStorage.js","TodoCounter/index.js","TodoSearch/index.js","TodoList/index.js","TodoItem/index.js","CreateTodoButton/index.js","Modal/index.js","TodoHeader/index.js","TodoError/index.js","TodoLoading/index.js","EmptyTodos/index.js","EmptySearchResults/index.js","ChangeAlert/index.js","ChangeAlert/withStorageListener.js","App/index.js","index.js"],"names":["useTodos","itemName","initialValue","React","useState","error","setError","loading","setLoading","item","setItem","sincronizeItem","setSincronizeItem","useEffect","setTimeout","localStorageItem","localStorage","getItem","parsedItem","JSON","parse","stringify","saveItem","newItem","stringifiedTodos","sincronize","useLocalStorage","todos","saveTodos","changeList","sincronizeTodos","searchValue","setSearchValue","openModal","setOpenModal","modalText","setModalText","completedTodos","filter","todo","completed","length","totalTodos","findRelatedTodos","todoText","text","toLowerCase","searchText","includes","completeTodo","index","console","log","deleteTodo","todoID","todoIndex","findIndex","id","splice","createTodo","newTodos","push","TodoCounter","className","TodoSearch","Fragment","onChange","event","target","value","placeholder","disabled","TodoList","props","renderFunc","render","children","onError","onLoading","onEmptyTodos","onEmptySearchResults","map","TodoItem","type","onClick","onComplete","onDelete","CreateTodoButton","document","getElementById","Modal","ReactDOM","createPortal","prevState","TodoHeader","Children","toArray","child","cloneElement","TodoError","TodoLoading","EmptyTodos","EmptySearchResults","WrappedComponent","ChangeAlertWithStorageListener","show","toggleShow","storageChange","setStorageChange","window","addEventListener","change","key","App"],"mappings":"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","file":"static/js/main.b1782ed9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useLocalStorage } from \"./useLocalStorage\";\r\n\r\n\r\n//Custom hook instead of provider\r\nfunction useTodos() {\r\n    //variable : how you name them right now.\r\n    //useLocalStorage is a custom hook that returns an object with the item,\r\n    const {\r\n        item: todos, \r\n        saveItem: saveTodos, \r\n        loading,\r\n        error,\r\n        setItem: changeList,\r\n        sincronize: sincronizeTodos,\r\n        \r\n      } = useLocalStorage('TODOS_V1', []);\r\n    \r\n      //For seach a todo and fx for changing value\r\n      const [searchValue, setSearchValue] = React.useState(''); //state and setter state for searchValue, default ''\r\n       //for modal\r\n      const [openModal, setOpenModal] = React.useState(false);\r\n      const [modalText, setModalText] = React.useState('');\r\n\r\n      //get the todo counter: completed vs total \r\n      const completedTodos = todos.filter(todo=> !!todo.completed).length; //get the todos that are completed (how many)\r\n      const totalTodos = todos.length; //get the total of todos\r\n    \r\n      //get the todos\r\n      let findRelatedTodos = [];\r\n      \r\n      if(!searchValue.length>=1){ //if there are not searchvalue, replace the todos with the todos from LS (Show them all)\r\n        findRelatedTodos = todos;\r\n      }else{\r\n        findRelatedTodos = todos.filter(todo=> { //filter the todos according to the user input\r\n          const todoText = todo.text.toLowerCase(); //make it both lowercase to easily compare them\r\n          const searchText = searchValue.toLowerCase(); //this one too\r\n          return todoText.includes(searchText) //and then look if one includes the other one.\r\n        });\r\n      }\r\n    \r\n     \r\n      //function that creates a todo\r\n      const createTodo = (text) =>{\r\n        const newTodos = [...todos];\r\n        newTodos.push({\r\n          text,\r\n          completed: false,\r\n          id: todos.length+1,\r\n        });\r\n\r\n        setModalText('TODO has been added to the list !');\r\n        saveTodos(newTodos);\r\n        changeList(newTodos);\r\n      }\r\n\r\n      //function that make a complete todo and change the symbol to check or not checked\r\n      const completeTodo = (index) => {\r\n        console.log(index);\r\n        //const todoIndex = todos.findIndex(todo=> todo.id === id); //finding the index selected based on text\r\n        const newItem = [...todos]; //get a new array of todos state replacement\r\n        if(!newItem[index].completed){\r\n          newItem[index].completed = true; //change the completion to true\r\n        }else{\r\n          newItem[index].completed = false;\r\n        }\r\n       \r\n        //save in localstorage and then modify the state in there as well \r\n        saveTodos(newItem);\r\n        changeList(newItem);\r\n        \r\n      }\r\n    \r\n      //funciton that deletes a todo based on text/item selected\r\n      const deleteTodo = (todoID) => { \r\n       \r\n        const todoIndex = todos.findIndex(todo=> todo.id === todoID); //finding the index selected based on todoID\r\n        const newItem = [...todos]; //get a new array of todos for state replacement\r\n        newItem.splice(todoIndex , 1); //remove the item based on index in array\r\n        //save in localstorage and then modify them\r\n        changeList(newItem);\r\n        saveTodos(newItem);\r\n      \r\n\r\n      }\r\n\r\n    \r\n\r\n    return (\r\n        {\r\n            loading ,\r\n            error ,\r\n            completedTodos,\r\n            totalTodos,\r\n            searchValue,\r\n            setSearchValue,\r\n            findRelatedTodos ,\r\n            completeTodo,\r\n            deleteTodo ,\r\n            openModal,\r\n            setOpenModal,\r\n            createTodo,\r\n            modalText,\r\n            setModalText,\r\n            sincronizeTodos,\r\n            \r\n            \r\n        }\r\n    )\r\n}\r\n\r\nexport { useTodos }\r\n","import React from \"react\";\r\n\r\n//custom react hook!\r\nfunction useLocalStorage (itemName, initialValue) { //'TODOS_V1'\r\n    const [error, setError] = React.useState(false); //changes if error on loading\r\n  \r\n    const [loading, setLoading] = React.useState(true); //save the loading status and creates a setter to change the loading status\r\n   \r\n    //For changing the state for the todoList previously obtained\r\n    const [item, setItem] = React.useState(initialValue);  //saves the item and creates a setter fx\r\n\r\n    const [sincronizeItem, setSincronizeItem] = React.useState(true);\r\n  \r\n    React.useEffect(()=>{\r\n      setTimeout(()=>{ //simulating a promise\r\n        try {\r\n           //get TODOS from localstorage (LS)\r\n           const localStorageItem = localStorage.getItem(itemName);\r\n  \r\n           let parsedItem = initialValue;\r\n           //if there isnt saved todo in LS\r\n           if(!localStorageItem){\r\n             localStorage.setItem(itemName, JSON.stringify(initialValue));\r\n           //if there are some :)  \r\n           }else{\r\n             parsedItem = JSON.parse(localStorageItem); //parse the LS item if there is one\r\n           }\r\n           \r\n           setItem(parsedItem); //changes the item status to the saved one\r\n   \r\n           //it is loaded alr.\r\n           setLoading(false); //when finishes loading\r\n\r\n           setSincronizeItem(true) //when everything is ok. Everything is sincronized! :D\r\n\r\n        } catch (error) {\r\n          setError(error) //if error when loading\r\n        }\r\n      },3000)//works every 3 secs.\r\n    }, [sincronizeItem]); //loads once when empty array or when any property changes.\r\n    \r\n    //sincronize fx\r\n    const sincronize = () => {\r\n      setLoading(true); //loading view\r\n      setSincronizeItem(false);\r\n\r\n    }\r\n   \r\n    //To modify the state and save it on localstorage\r\n    const saveItem = (newItem) => {\r\n      try {\r\n        const stringifiedTodos = JSON.stringify(newItem); //stringfy it\r\n        localStorage.setItem(itemName, stringifiedTodos); //save it on LS\r\n       // setItem(newItem); //change the state of new item in case.\r\n      } catch (error) {\r\n        setError(error) //if errors on loading.\r\n      }\r\n     \r\n    }\r\n    //Returning the item and the fx for saving on localstorage and use it on APP. This will be used in a Provider (TodoProvider).\r\n    return {\r\n      item, //returning the todo object obtained from localstorage\r\n      saveItem, //returning this fx in case if its needed\r\n      loading, //returning the state of loading var\r\n      error, //returning the state of error var\r\n      setItem, //for changing the state of todo list but not modify the LS\r\n      sincronize, //sharing the fx in the rest of app!,\r\n    };\r\n  \r\n  }\r\n\r\n  export {useLocalStorage};","import React from \"react\";\r\nimport './TodoCounter.css';\r\n\r\n\r\n\r\nfunction TodoCounter({totalTodos, completedTodos, loading}) {\r\n   \r\n    return (\r\n        <div className='TodoCounter-title-wrapper'>\r\n            <p className='TodoCounter-title'>What's up today?</p>\r\n            <p className={`TodoCounter-todos-count ${!!loading && 'TodoCounter--loading'}`}>\r\n                TO-DOS Completed: {completedTodos}/{totalTodos}\r\n            </p>\r\n \r\n        </div>\r\n          )\r\n}\r\n\r\nexport {TodoCounter};","import React from \"react\";\r\nimport './TodoSearch.css';\r\n\r\nfunction TodoSearch({searchValue, setSearchValue, loading}) {\r\n\r\n    const onSearchValueChange = (event) => {\r\n        setSearchValue(event.target.value)\r\n        \r\n    }\r\n\r\n \r\n    return (\r\n        <React.Fragment>\r\n            <input \r\n                onChange={onSearchValueChange} \r\n                value={searchValue}\r\n                className='inputSearchTodo' \r\n                id='search' placeholder='SEARCH/CREATE TODOS HERE'\r\n                disabled={loading}  \r\n            >\r\n            </input>\r\n           \r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport {TodoSearch};","import React from \"react\";\r\nimport './TodoList.css';\r\n\r\nfunction TodoList(props) {\r\n\r\n    const renderFunc = props.render || props.children;\r\n    \r\n    \r\n    \r\n    return (\r\n       <section className={`TodoList`}>\r\n           {props.error && props.onError()}\r\n\r\n           {props.loading && props.onLoading()}\r\n\r\n           {(!props.loading && !props.totalTodos) && props.onEmptyTodos()}\r\n\r\n            {/* if there is todos in the list (any number different of 0 ) and \r\n            there is none searchTodos */}\r\n           {(!!props.totalTodos && !props.findRelatedTodos.length) && props.onEmptySearchResults(props.searchText) }\r\n\r\n           {/* {props.findRelatedTodos.map((todo,index)=> props.render(todo,index))} */}   {/*this is the same as the next line*/}\r\n            {(!props.loading && !props.error) && props.findRelatedTodos.map(renderFunc)}\r\n       </section>\r\n    )\r\n}\r\n\r\nexport {TodoList};","import React from \"react\";\r\nimport './TodoItem.css';\r\n\r\nfunction TodoItem(props) {\r\n\r\n    return (\r\n        <div className='TodoItem'>\r\n         \r\n            <label className=\"TodoItem-custom-checkbox\">\r\n                <input type=\"checkbox\" id='checkboxStatus' className={`TodoItem-checkbox ${props.completed && 'TodoItem-checkbox-active'}`}/>\r\n                <span onClick={props.onComplete} className={`TodoItemSpanBox ${props.completed && 'TodoItemSpan'}`}></span>\r\n            </label>\r\n           <p>{props.text}</p>            \r\n            <button  className='TodoItem-button-deleteItem' onClick={props.onDelete}>X</button>\r\n        </div>\r\n            \r\n           \r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport {TodoItem}","import React from \"react\";\r\nimport './CreateTodoButton.css';\r\n\r\nfunction CreateTodoButton (props) {\r\n\r\n    \r\n    const onClickButton = () => {\r\n\r\n       if(document.getElementById('search').value){\r\n           console.log(\"tx\", document.getElementById('search').value);\r\n           props.createTodo(document.getElementById('search').value)\r\n           \r\n       } else{\r\n           props.setModalText('Sorry, we couldnt add your TODO right now :(');\r\n           console.log(\"tx2\", document.getElementById('search').value);\r\n         \r\n       }\r\n       props.setOpenModal(true)\r\n      \r\n    }\r\n\r\n    return (\r\n        <button className='btnCreateTodo'\r\n        onClick={onClickButton}>NEW</button>\r\n    );\r\n}\r\n\r\nexport { CreateTodoButton };","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './Modal.css';\r\n\r\n\r\nfunction Modal(props,{children} ){\r\n\r\n    const onClose = () =>{\r\n        \r\n        props.setOpenModal(prevState => !prevState)\r\n\r\n    }\r\n\r\n    return ReactDOM.createPortal(\r\n        <div className='Modal-bg'>\r\n            <div className='Modal-Container'>\r\n             {children}\r\n             <p>{props.modalText}</p>\r\n             <span className='Modal-btnClose' onClick={onClose}>x</span>\r\n            </div>\r\n            \r\n        </div>, document.getElementById('myModal')\r\n    );\r\n}\r\n\r\n\r\nexport {Modal}","import React from \"react\";\r\n\r\nfunction TodoHeader({ children, loading }){\r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n           {\r\n                React.Children\r\n                .toArray(children)\r\n                .map(child => React.cloneElement(child, { loading }))\r\n           } \r\n        </React.Fragment>\r\n\r\n \r\n    )\r\n}\r\n\r\nexport {TodoHeader}","import React from \"react\";\r\n\r\nfunction TodoError (){\r\n    return (\r\n        <p>Panic, there is an error coming!</p>\r\n    );\r\n}\r\n\r\nexport { TodoError }\r\n\r\n","import React from \"react\";\r\n\r\nfunction TodoLoading (){\r\n    return (\r\n        <p>Loading TODOs, dont panic!</p>\r\n    );\r\n}\r\n\r\nexport { TodoLoading }\r\n\r\n","import React from \"react\";\r\n\r\nfunction EmptyTodos (){\r\n    return (\r\n        <p>Make ur first todo</p>\r\n    );\r\n}\r\n\r\nexport { EmptyTodos }\r\n\r\n","import React from \"react\";\r\n\r\nfunction EmptySearchResults (props){\r\n    return (\r\n        <p>No results for {props.searchText} </p>\r\n    );\r\n}\r\n\r\nexport { EmptySearchResults }\r\n\r\n","\r\nimport { withStorageListener } from \"./withStorageListener\";\r\nimport './ChangeAlert.css'\r\nfunction ChangeAlert({show, toggleShow}){\r\n    if(show) {\r\n        return (    \r\n        <div className=\"ChangeAlert\">\r\n            <p>There are changes, please reload</p>\r\n            <button onClick={()=> {toggleShow(false)}}>Reload</button>\r\n        </div>\r\n        );\r\n    }else {\r\n        return null;\r\n    }\r\n   \r\n}\r\n\r\nconst ChangeAlertWithStorageListener = withStorageListener(ChangeAlert)\r\n\r\nexport {ChangeAlertWithStorageListener}","import React from \"react\";\r\n\r\n\r\nfunction withStorageListener(WrappedComponent) {\r\n    return function WrapperComponentWithStorageListener (props){\r\n\r\n        const [storageChange, setStorageChange] = React.useState(false); //is there any change in any other window.\r\n\r\n        window.addEventListener('storage', (change) => {\r\n            if(change.key === 'TODOS_V1') {\r\n               \r\n                setStorageChange(true);\r\n                console.log('changes in TODOS_V1');\r\n            }\r\n        });\r\n\r\n        const toggleShow = () =>{\r\n            props.sincronize();\r\n            setStorageChange(false);\r\n            \r\n        }\r\n\r\n        return (\r\n            <WrappedComponent \r\n                show={storageChange}\r\n                toggleShow={toggleShow}    \r\n                >\r\n            </WrappedComponent>\r\n        ) \r\n       \r\n    }\r\n}\r\n\r\n\r\nexport { withStorageListener }","import React from \"react\";\r\nimport { useTodos } from './useTodos';\r\nimport { TodoCounter }from \"../TodoCounter\";\r\nimport { TodoSearch } from \"../TodoSearch\";\r\nimport { TodoList } from \"../TodoList\";\r\nimport { TodoItem } from \"../TodoItem\";\r\nimport { CreateTodoButton } from \"../CreateTodoButton\";\r\nimport { Modal } from '../Modal';\r\nimport { TodoHeader} from '../TodoHeader';\r\nimport { TodoError } from '../TodoError';\r\nimport { TodoLoading } from \"../TodoLoading\";\r\nimport { EmptyTodos } from \"../EmptyTodos\";\r\nimport { EmptySearchResults } from '../EmptySearchResults';\r\nimport { ChangeAlertWithStorageListener } from '../ChangeAlert';\r\n\r\n\r\nfunction App() {\r\n  const {\r\n    error, \r\n    loading, \r\n    findRelatedTodos, \r\n    completeTodo, \r\n    deleteTodo, \r\n    openModal, \r\n    setOpenModal, \r\n    createTodo, \r\n    modalText, \r\n    setModalText,\r\n    totalTodos, completedTodos,\r\n    searchValue, setSearchValue,\r\n    sincronizeTodos,\r\n    } = useTodos();\r\n\r\n\r\n    return(\r\n      <React.Fragment>\r\n         <div className=\"todo-header-wrapper\">\r\n            <TodoHeader loading={loading}> \r\n                <TodoCounter\r\n                    totalTodos={totalTodos}\r\n                    completedTodos={completedTodos}\r\n                />\r\n               <TodoSearch\r\n                    searchValue={searchValue}\r\n                    setSearchValue={setSearchValue}\r\n                />\r\n            </TodoHeader>\r\n\r\n            \r\n          </div>\r\n  \r\n        <div className=\"todolist-inner-wrapper\">\r\n\r\n                <TodoList \r\n                   \r\n                    error={error}\r\n                    loading={loading}\r\n                    totalTodos = {totalTodos}\r\n                    findRelatedTodos = {findRelatedTodos}\r\n                    searchText = {searchValue}\r\n                    onError={()=> <TodoError /> }\r\n                    onLoading={()=> <TodoLoading /> }\r\n                    onEmptyTodos={()=> <EmptyTodos /> }\r\n                    onEmptySearchResults={ (searchText)=> <EmptySearchResults searchText={searchText}></EmptySearchResults> }\r\n                    // render={ (todo,index) => (\r\n                    //     <TodoItem \r\n                    //         key={index} \r\n                    //         text={todo.text} \r\n                    //         completed={todo.completed}\r\n                    //         onComplete = {()=>completeTodo(index)}\r\n                    //         onDelete = {()=>deleteTodo(todo.id)}\r\n                    //     />)}\r\n\r\n                   >\r\n                    { (todo, index) => (\r\n                        <TodoItem \r\n                            key={index} \r\n                            text={todo.text} \r\n                            completed={todo.completed}\r\n                            onComplete = {()=>completeTodo(index)}\r\n                            onDelete = {()=>deleteTodo(todo.id)}\r\n                        />\r\n                    )}            \r\n                </TodoList>\r\n\r\n              {/* <TodoList>\r\n              \r\n                  {error && <p>Panic, there is an error coming!</p>}\r\n                  {loading && <p>Loading, dont panic!</p>}\r\n                  {(!loading && !findRelatedTodos.length) && <p>Make ur first todo</p>}\r\n      \r\n                  {findRelatedTodos.map((todo,index) => (\r\n                  <TodoItem \r\n                      key={index} \r\n                      text={todo.text} \r\n                      completed={todo.completed}\r\n                      onComplete = {()=>completeTodo(index)}\r\n                      onDelete = {()=>deleteTodo(todo.id)}\r\n                  />))}\r\n              </TodoList> */}\r\n         \r\n        </div>\r\n          \r\n            {!!openModal && (\r\n                <Modal setOpenModal={setOpenModal} modalText={modalText} />             \r\n            )}\r\n            <ChangeAlertWithStorageListener sincronize={sincronizeTodos} />    {/* high order comp.*/ } \r\n            <CreateTodoButton setOpenModal={setOpenModal} createTodo={createTodo} setModalText={setModalText} /> \r\n          \r\n  \r\n          \r\n      </React.Fragment>  \r\n      );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App/index';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <App />,  \r\n    document.getElementById('myApp')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}